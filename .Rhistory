y_vec = y_sample,
M_mat = M_mat,
Theta_initial = Theta_initial,
weights_ann = ANN_weights,
weights_agl = AGL_weights,
gamma_val = gamma_val,
max.iter = control[[3]],
tol = control[[4]]
)
for(i in 1:len_tuning ){
BIC_fit_list[[i]] <- Theta_BIC(y=y_sample, M = M_mat, Theta_fit=fit_list[[i]], rank_est=fit_list[[i]]$rank)
}
bic_vec <- vector("numeric", len_tuning)
for( i in 1:len_tuning){
bic_vec[i] <-  BIC_fit_list[[i]][2]
}
## The best Theta with respect to BIC
best_loc <- which( min(bic_vec) == bic_vec )
best_fit <- fit_list[[best_loc]]
## Variable selection
selected_covariates_loc <- apply(best_fit$Theta_sparse,1,FUN=function(x){
sum(x) !=0
})
if( is.null(colnames(X_sample)) != TRUE){
selected_covariates <- colnames(X_sample)[selected_covariates_loc]
} else {
selected_covariates <- "Cannot find the covariate names in X_sample"
}
result <- list( "Theta_sparse" = best_fit$Theta_sparse,
"Theta_low_rank" = best_fit$Theta_low_rank,
"Theta" = best_fit$Theta,
"rank" = best_fit$rank,
"U" = best_fit$U,
"V"=best_fit$V,
"D"= best_fit$D,
"B_U_mat" = B_U_mat,
"selected_covariates" = selected_covariates)
return(result)
}
pvcm <- function(y_sample, X_sample, U_sample, num_cores = NULL, knots_val=7,
control = list(num_tau_1=20, num_tau_2=20, max.iter=100, tol=1e-5)
){
n <- length(y_sample)
p <- dim(X_sample)[2]
## Create orthogonal basis functions with cubic B-spline
## with equally spaced points over the domain
## ranging from min and max of U_sample
u_vec <- seq( min(U_sample), max(U_sample),length.out = 100)
knots_u_vec <- select.knots(u_vec, knots = knots_val ,p=3)
B_mat <- (splineDesign(knots_u_vec, u_vec, ord = 4))
d <- dim(B_mat)[2]
G <- (t(B_mat) %*% B_mat ) / length(u_vec)
G_sqrt <- eigen(G)$vectors %*% diag( sqrt(eigen(G)$values)  ) %*% t( eigen(G)$vectors )
G_sqrt_inverse <- eigen(G)$vectors %*% diag( 1/sqrt(eigen(G)$values)  ) %*% t( eigen(G)$vectors )
B_U_mat <- t( (splineDesign(knots = knots_u_vec, x = U_sample, ord = 4)) %*% G_sqrt_inverse)
## Create the design matrix M with kronecker product
M_mat <- matrix(NA, n, d* p )
for(i in 1:n){
M_mat[i,] <- kronecker((t(B_U_mat))[i,], X_sample[i,] )
}
## Evaluate the initial value for Theta with a ridge regression
temp <- cv.glmnet(x=M_mat, y=y_sample, alpha=0, intercept = F)
theta_initial_vec <- coef(temp, s=temp$lambda.min)[-1]
Theta_initial <- matrix(theta_initial_vec, p, d)
svd_initial <- svd(Theta_initial)
## Adaptive weights
# 1. Adaptive nuclear norm
eigen_decom <- eigen( 1/n * t(M_mat) %*%M_mat)
ANN_weights <- svd_initial$d^(-2)
gamma_val <- 1/ (eigen_decom$values[1])
# 2. Adaptive group lasso
row_norms <- apply( (Theta_initial), 1, FUN = function(x){
sqrt( sum( x^{2}  ) )
} )
AGL_weights <- row_norms^(-1)
## Tuning parameters
tau_1_max <- svd_initial$d[1]^3
tau_1_min <- min(svd_initial$d)^3
tau_1_all <- c( 0, exp(seq(from = log(tau_1_min), to = log(tau_1_max), length.out = control[[1]])) )
tau_2_max <- max(row_norms)^2
tau_2_min <- min(row_norms)^2
tau_2_all <- c( 0, exp(seq( log( tau_2_min ), log(tau_2_max), length = control[[2]]) ) )
tuning = list() # all combination of tuning parameters
par_mat_prox <- matrix(NA, length(tau_1_all) * length(tau_2_all), 2)
# for parallel computing
len_tuning = 0
for(l in tau_1_all){
for(k in tau_2_all){
len_tuning = len_tuning + 1
par_mat_prox[len_tuning,] <- c(l, k)
}
}
## Use parallel computing for DYS algorithm with a large number of tuning parameter combinations
if(is.null(num_cores) == TRUE){
num_cores <- detectCores() - 1
}
my_cluster <- makeCluster(num_cores)
## Application of DYS algorithm
fit_list <- list()
BIC_fit_list <- list()
fit_list <- parRapply(my_cluster, par_mat_prox, FUN = dys_pvcm,
y_vec = y_sample,
M_mat = M_mat,
Theta_initial = Theta_initial,
weights_ann = ANN_weights,
weights_agl = AGL_weights,
gamma_val = gamma_val,
max.iter = control[[3]],
tol = control[[4]]
)
for(i in 1:len_tuning ){
BIC_fit_list[[i]] <- Theta_BIC(y=y_sample, M = M_mat, Theta_fit=fit_list[[i]], rank_est=fit_list[[i]]$rank)
}
bic_vec <- vector("numeric", len_tuning)
for( i in 1:len_tuning){
bic_vec[i] <-  BIC_fit_list[[i]][2]
}
## The best Theta with respect to BIC
best_loc <- which( min(bic_vec) == bic_vec )
best_fit <- fit_list[[best_loc]]
## Variable selection
selected_covariates_loc <- apply(best_fit$Theta_sparse,1,FUN=function(x){
sum(x) !=0
})
if( is.null(colnames(X_sample)) != TRUE){
selected_covariates <- colnames(X_sample)[selected_covariates_loc]
} else {
selected_covariates <- "Cannot find the covariate names in X_sample"
}
result <- list( "Theta_sparse" = best_fit$Theta_sparse,
"Theta_low_rank" = best_fit$Theta_low_rank,
"Theta" = best_fit$Theta,
"rank" = best_fit$rank,
"U" = best_fit$U,
"V"=best_fit$V,
"D"= best_fit$D,
"B_U_mat" = B_U_mat,
"selected_covariates" = selected_covariates)
return(result)
}
start_time <- Sys.time()
pvcm_fit <- pvcm(y_sample = y_ready, X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
knots_val = 7,
control = list(num_tau_1=20, num_tau_2=20, max.iter=100, tol=1e-5)
)
end_time <- Sys.time()
end_time - start_time
pvcm_fit$selected_covariates
pvcm_fit$Theta
set.seed(12345)
data(yeast)
## Preparation for design matrix X and the long y
# 1. y_vec
y_ready <- c( t( yeast$y ) )
n <- length(y_ready)
# 2. X_mat
p_org <- dim(yeast$x)[2]
X_temp <- apply( scale(yeast$x), 1, FUN = function(x){
matrix( rep(x, 18), 18, p_org, byrow=TRUE)
}, simplify = FALSE)
X_mat <- matrix(NA, n ,p_org)
for(i in 1:length(X_temp)){
X_mat[ ( 1 + 18 * (i- 1) ):(18 * i) , ] <- X_temp[[i]]
}
X_ready <- cbind( rep(1, n), X_mat )
colnames(X_ready) <- c( "intercept", colnames(yeast$x) )
## Fit PVCM
start_time <- Sys.time()
pvcm_fit <- pvcm(y_sample = y_ready, X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
knots_val = 7,
control = list(num_tau_1=20, num_tau_2=20, max.iter=100, tol=1e-5)
)
end_time <- Sys.time()
end_time - start_time
pvcm_fit$selected_covariates
pvcm_fit$Theta
head(pvcm_fit$Theta)
pvcm_fit$selected_covariates
true_TFs <- c("ACE2_YPD", "SWI4_YPD", "SWI5_YPD", "SWI6_YPD", "MBP1_YPD", "STB1_YPD", "FKH1_YPD",
"FKH2_YPD", "NDD1_YPD", "MCM1_YPD", "ABF1_YPD", "BAS1_YPD", "CBF1_YPD", "GCN4_YPD",
"GCR1_YPD", "GCR2_YPD", "LEU3_YPD", "MET31_YPD", "REB1_YPD", "SKN7_YPD", "STE12_YPD")
pvcm_fit$selected_covariates %in% true_TFs
pvcm_fit$selected_covariates[!(pvcm_fit$selected_covariates %in% true_TFs)]
true_positive <-  sum(pvcm_fit$selected_covariates %in% true_TFs)
false_negative <- p_org - sum(!(pvcm_fit$selected_covariates %in% true_TFs)) - 1
# except intercept
accuracy <- (true_positive + false_negative) / p_org
accuracy
p_org
pvcm_fit$selected_covariates[pvcm_fit$selected_covariates %in% true_TFs]
sort(true_TFs)
sort(pvcm_fit$selected_covariates[pvcm_fit$selected_covariates %in% true_TFs])
sort(pvcm_fit$selected_covariates[pvcm_fit$selected_covariates %in% true_TFs])
sort(true_TFs)
p_org
accuracy <- (true_positive + false_negative) / p_org
accuracy
false_negative
true_positive
true_negative <- p_org - length(true_TFs) - sum(!(pvcm_fit$selected_covariates %in% true_TFs)) - 1
true_positive <-  sum(pvcm_fit$selected_covariates %in% true_TFs)
sort(pvcm_fit$selected_covariates[pvcm_fit$selected_covariates %in% true_TFs])
sort(true_TFs)
true_negative <- p_org - length(true_TFs) - sum(!(pvcm_fit$selected_covariates %in% true_TFs)) - 1
accuracy <- (true_positive + true_negative) / p_org
# 0.9339623
accuracy
(true_positive + 1 + true_negative) / (p_org+1)
devtools::document()
rm(list = c("dys_pvcm", "pvcm", "Theta_BIC", "Theta_df_nai"))
devtools::document()
devtools::build()
devtools::document()
devtools::build()
library(pvcm)
devtools::build()
devtools::build()
library(pvcm)
library(spls)
set.seed(12345)
data(yeast)
## Preparation for design matrix X and the long y
# 1. y_vec
y_ready <- c( t( yeast$y ) )
n <- length(y_ready)
# 2. X_mat
p_org <- dim(yeast$x)[2]
X_temp <- apply( scale(yeast$x), 1, FUN = function(x){
matrix( rep(x, 18), 18, p_org, byrow=TRUE)
}, simplify = FALSE)
X_mat <- matrix(NA, n ,p_org)
for(i in 1:length(X_temp)){
X_mat[ ( 1 + 18 * (i- 1) ):(18 * i) , ] <- X_temp[[i]]
}
X_ready <- cbind( rep(1, n), X_mat )
colnames(X_ready) <- c( "intercept", colnames(yeast$x) )
## Fit PVCM
pvcm_fit <- pvcm(y_sample = y_ready, X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
knots_val = 7,
control = list(num_tau_1=20, num_tau_2=20, max.iter=100, tol=1e-5)
)
pvcm
devtools::document()
devtools::build()
devtools::load_all(".")
library(pvcm)
pvcm
dys_pvcm
library(pvcm)
library(pvcm)
library(spls)
true_TFs
library(pvcm)
library(spls)
set.seed(12345)
data(yeast)
## Preparation for design matrix X and the long y
# 1. y_vec
y_ready <- c( t( yeast$y ) )
n <- length(y_ready)
# 2. X_mat
p_org <- dim(yeast$x)[2]
X_temp <- apply( scale(yeast$x), 1, FUN = function(x){
matrix( rep(x, 18), 18, p_org, byrow=TRUE)
}, simplify = FALSE)
X_mat <- matrix(NA, n ,p_org)
for(i in 1:length(X_temp)){
X_mat[ ( 1 + 18 * (i- 1) ):(18 * i) , ] <- X_temp[[i]]
}
X_ready <- cbind( rep(1, n), X_mat )
colnames(X_ready) <- c( "intercept", colnames(yeast$x) )
## Fit PVCM
pvcm_fit <- pvcm(y_sample = y_ready, X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
knots_val = 7,
control = list(num_tau_1=20, num_tau_2=20, max.iter=100, tol=1e-5)
)
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
library(pvcm)
library(pvcm)
plot_pvcm
devtools::document()
library(pvcm)
plot_pvcm
library(pvcm)
library(spls)
par(mar = c(4, 2, 2, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,5),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = c("intercept", true_TFs)
)
library(pvcm)
library(pvcm)
library(spls)
set.seed(12345)
data(yeast)
## Preparation for design matrix X and the long y
# 1. y_vec
y_ready <- c( t( yeast$y ) )
n <- length(y_ready)
# 2. X_mat
p_org <- dim(yeast$x)[2]
X_temp <- apply( scale(yeast$x), 1, FUN = function(x){
matrix( rep(x, 18), 18, p_org, byrow=TRUE)
}, simplify = FALSE)
X_mat <- matrix(NA, n ,p_org)
for(i in 1:length(X_temp)){
X_mat[ ( 1 + 18 * (i- 1) ):(18 * i) , ] <- X_temp[[i]]
}
X_ready <- cbind( rep(1, n), X_mat )
colnames(X_ready) <- c( "intercept", colnames(yeast$x) )
## Fit PVCM
pvcm_fit <- pvcm(y_sample = y_ready, X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
knots_val = 7,
control = list(num_tau_1=20, num_tau_2=20, max.iter=100, tol=1e-5)
)
true_TFs <- c("intercept",
"ACE2_YPD", "SWI4_YPD", "SWI5_YPD", "SWI6_YPD", "MBP1_YPD", "STB1_YPD", "FKH1_YPD",
"FKH2_YPD", "NDD1_YPD", "MCM1_YPD", "ABF1_YPD", "BAS1_YPD", "CBF1_YPD", "GCN4_YPD",
"GCR1_YPD", "GCR2_YPD", "LEU3_YPD", "MET31_YPD", "REB1_YPD", "SKN7_YPD", "STE12_YPD")
# Experimentally confirmed covariates
true_positive <-  sum(pvcm_fit$selected_covariates %in% true_TFs) - 1
# Not consider the intercept
true_negative <- p_org - (length(true_TFs) - 1) - sum(!(pvcm_fit$selected_covariates %in% true_TFs))
# except intercept
accuracy <- (true_positive + true_negative) / p_org
# 0.7358491
accuracy
true_positive
pvcm_fit$selected_covariates
sum(pvcm_fit$selected_covariates %in% true_TFs)
p_org - (length(true_TFs) - 1)
true_negative
true_positive + true_negative
p_org
accuracy <- (true_positive + true_negative) / p_org
accuracy
par(mar = c(4, 2, 2, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,5),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
par(mar = c(4, 2, 2, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,5),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
par(mar = c(4, 2, 2, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,5),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
plot_pvcm(pvcm_fit, pallet_size = c(4,5),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
plot_pvcm(pvcm_fit, pallet_size = c(4,5),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
plot_pvcm
library(pvcm)
library(pvcm)
library(spls)
par(mar = c(4, 2, 2, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,5), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
par(mar = c(4, 2, 2, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,4), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
library(pvcm)
library(pvcm)
library(spls)
par(mar = c(4, 2, 2, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,5), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
par(mar = c(4, 2, 2, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,4), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
# Experimentally confirmed covariates
sort(true_TFs)
par(mar = c(3.8, 1.8, 2, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,4), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
par(mar = c(4, 1.8, 1.8, 1.8) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,4), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
par(mar = c(4, 1.8, 1.8, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,4), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
par(mar = c(4, 2, 1.8, 2) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,4), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
par(mar = c(4, 2, 1.8, 1.8) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,4), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
par(mar = c(3.8, 2, 1.8, 1.8) )
## Varying coefficient functions
plot_pvcm(pvcm_fit, pallet_size = c(4,4), X_sample = X_ready,
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = TRUE, true_covariates = true_TFs
)
## Principal functions
plot_pvcm(pvcm_fit, pallet_size = c(2,2),
U_sample = rep(seq(0,1,length.out = 18), dim(yeast$x)[1]),
beta_plot = FALSE
)
getwd()
knit_with_parameters('~/My Drive/pvcm/vignettes/vignette.Rmd')
library(pvcm)
library(spls)
(true_positive + true_negative) / p_org
getwd()
tempdir()
library(pvcm)
library(pvcm)
data(yeast)
